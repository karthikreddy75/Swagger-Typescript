import { getClassBody, getKotlinType, getRefName, getSchemaName } from "./utils.mjs";
import { AUTOGENERATED_COMMENT } from "./strings.mjs";
import { getJsdoc } from "../utilities/jsdoc.mjs";
import { isAscending } from "../utils.mjs";
function generateTypes(types, config) {
    let code = AUTOGENERATED_COMMENT;
    try {
        code += types
            .sort(({ name }, { name: _name }) => isAscending(name, _name))
            .reduce((prev, { name: _name, schema, description }) => {
            const name = getSchemaName(_name);
            prev += `
${getJsdoc(Object.assign(Object.assign({}, schema), { description: description || (schema === null || schema === void 0 ? void 0 : schema.description), deprecated: (schema === null || schema === void 0 ? void 0 : schema.deprecated)
                    ? (schema === null || schema === void 0 ? void 0 : schema["x-deprecatedMessage"]) || String(schema === null || schema === void 0 ? void 0 : schema.deprecated)
                    : undefined }))}
${getTypeDefinition(name, schema, config)}`;
            return prev;
        }, "");
        return code;
    }
    catch (error) {
        console.error({ error });
        return "";
    }
}
function getTypeDefinition(name, schema = {}, config) {
    const { type, enum: Enum, "x-enumNames": enumNames, allOf, oneOf, items, $ref, additionalProperties, properties, } = schema;
    if (Enum) {
        return `enum ${name} {${Enum.map((e, index) => `${enumNames ? enumNames[index] : e}=${typeof e === "string" ? `"${e}"` : `${e}`}`)}}`;
    }
    if (allOf || oneOf) {
        return `union ${name} {${getKotlinType(schema, config)}}`;
    }
    if (type === "array" && items) {
        return `type ${name} = ${getKotlinType(items, config)}[]`;
    }
    if ($ref) {
        return `type ${name} ${getRefName($ref)}`;
    }
    if (type === "object") {
        const typeObject = getClassBody(schema, config);
        return `data class ${name}(${typeObject}){}`;
    }
    if (type === "string") {
        return `union ${name} {${type}}`;
    }
    return `union ${name} {Any}`;
}
export { generateTypes };
//# sourceMappingURL=generateTypes.mjs.map